# FileName : functions.include
# Desc : Definition of all function that are being brewed at my lab.



############################FUNCTIONS PRESENT IN SCRIPT ##########################
#debugMsg() : print the debug msg all over in script and turn them off with single switch
#addPropertyToList() : Function to add propert to plist takes 3 agrs prop name, type and value
#updatePlist() : updating the plist if properties already exists
#versionValues() : printing current value of version variables
#whatsUpdate()
#extractVersionNumbers() : Extracting major, minor and revision from version string
#extractPreviousVersionNumbers() :Extracting major, minor and revision from previous version string
##################################################################################

## ONLY UNCOMMENT BELOW LINE FOR THE PURPOSE OF DEBUGGING
#set -x

######### DEBUG MSG function YES to Enable, No to Disable 
DEBUG="YES" # Set DEBUG YES(Enable) or NO(Disable)

######### SYMBOLIC CONSTANT  
blackFlag="⚑"
whiteFlag="⚐"
leftBlackArrow="◀"
rightBlackArrow="▶"
doubleArrow="➤➤"
crossmark1="✖"
crossmark2="✕"
crossmark3="✗"
crossmark4="✘"
tickmark1="✓"
tickmark2="✔"

star1="☆"
star2="✩"
star3="✪"
star4="✭" 

info="ℹ"

############# EXIT CODES
notEnoughArgs=44


#DEFINEING THE CONST VALUES
#plistFile="${PROJECT_DIR}/${INFOPLIST_FILE}"
plistFile="InfoT2.plist" ## TESTING FILE NAME

## Print info Msg and icon
printInfo()
{
	echo "($info) Info : $1"
}

## Print Error msg and icon 
printError()
{
	echo "($crossmark1) ERROR : $1"
}

printFlag()
{
	echo "($blackFlag) : $1"
}


### DEBUG Message function 
debugMsg()
{
	if [[ $DEBUG == "YES" ]]
	then
	echo "DEBUG MESSAGE---> $1"
	fi
}

addPropertyToList()
{
	echo "Using provided arguments to create list."
	if [[ $# -ne 3 ]]
	then
		printError "Not enough arguments to add property to the list"
		printFlag "Exiting script with Error Code $notEnoughArgs."
		#echo "($info) Info : Find all exit codes in 'Exit Codes' section."
		printInfo "Find all exit codes in 'Exit Codes' section."
		exit $notEnoughArgs
	else
		echo "Creating property CustomPreviousBundleShortVersionString."
		/usr/libexec/PlistBuddy -c "Add :$1 $2 $3" $plistFile
		RC=$?
		if [[ RC -ne 0 ]]
		then 
			echo "ERROR : $blackFlag $doubleArrow Exit with error code $?"
			exit $?
		else 
			debugMsg "Property $1 Added to the $plistFile"
		fi
	fi 
	debugMsg "end of Add Property function."
}


##### FUNCTION TO UPDATE plist 
updatePlist()
{

#/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $NEWVERSIONSTRING" "${PROJECT_DIR}/${INFOPLIST_FILE}"
NEWVERSIONSTRING=`echo $MAJORVERSION.$MINORVERSION.$REVISION`
/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $NEWVERSIONSTRING" $plistFile
debugMsg "Exit Code is $?"
echo "Setting CFBundleShortVersionString property to $NEWVERSIONSTRING."

#Setting up Previous Version String
PVERSIONSTRING=`echo $PMAJORVERSION.$PMINORVERSION.$(($REVISION - 1))`
/usr/libexec/PlistBuddy -c "Set :CustomPreviousBundleShortVersionString $PVERSIONSTRING" $plistFile
debugMsg "Exit Code is $?"
echo "Setting CustomPreviousBundleShortVersionString property to $PVERSIONSTRING."

}  #end of function


versionValues()
{
	echo "Version values as follows:"
	echo "Current version $VERSIONSTRING"
	echo "New version NEWVERSIONSTRING"
	echo "Previous version $PVERSIONSTRING"
} #End of funtion

whatsUpdate()
{
	echo "$plist File is updated with follwoing values "
	echo "New version: CFBundleShortVersionString = $NEWSUBVERSION"
	echo "Previous version: CustomPreviousBundleShortVersionString = $PVERSIONSTRING"
} #ENd of function

#Extract Major, Minor and Revision from Version String
extractVersionNumbers() 
{
	MAJORVERSION=`echo $VERSIONSTRING | awk -F "." '{print $1}'`
	MINORVERSION=`echo $VERSIONSTRING | awk -F "." '{print $2}'`
	REVISION=`echo $VERSIONSTRING | awk -F "." '{print $3}'`
}

#Extract Major, Minor and Revision from PRevious Version String
extractPreviousVersionNumbers()
{
	#Extracting Previous Version 
	PMAJORVERSION=`echo $PVERSIONSTRING | awk -F "." '{print $1}'`
	PMINORVERSION=`echo $PVERSIONSTRING | awk -F "." '{print $2}'`
	PREVISION=`echo $PVERSIONSTRING | awk -F "." '{print $3}'`
}

